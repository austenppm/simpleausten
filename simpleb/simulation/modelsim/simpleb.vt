// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/26/2022 14:47:50"
                                                                                
// Verilog Test Bench template for design : simpleb
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module simpleb_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg Exec;
reg Reset;
reg clock;
reg [15:0] in;
// wires                                               
wire BF;
wire Clk;
wire DR_MDR5;
wire [7:0]  LED0;
wire [7:0]  LED1;
wire [7:0]  LED2;
wire [7:0]  LED3;
wire MEMread3;
wire PCw;
wire REGwren5;
wire [7:0]  count_LEDA;
wire [7:0]  count_LEDB;
wire [3:0]  cycle_selectorA;
wire [3:0]  cycle_selectorB;
wire selector;
wire systemStopped0;

// assign statements (if any)                          
simpleb i1 (
// port map - connection between master ports and signals/registers   
	.BF(BF),
	.Clk(Clk),
	.DR_MDR5(DR_MDR5),
	.Exec(Exec),
	.LED0(LED0),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.MEMread3(MEMread3),
	.PCw(PCw),
	.REGwren5(REGwren5),
	.Reset(Reset),
	.clock(clock),
	.count_LEDA(count_LEDA),
	.count_LEDB(count_LEDB),
	.cycle_selectorA(cycle_selectorA),
	.cycle_selectorB(cycle_selectorB),
	.in(in),
	.selector(selector),
	.systemStopped0(systemStopped0)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
clock <= 0;
Exec <= 1;                       
Reset <= 0;
in <= 0;                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#1000
Reset <= 1;
#1000
Exec <= 0;                       
#10000
Exec <=1;
#1000
in <= 7;
#15000
Exec <= 0;
#10000
Exec <= 1;

@eachvec;                                              
// --> end                                             
end        
always begin
#100
clock <= ~clock;
end                                            
endmodule