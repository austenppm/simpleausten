module ALU(
	input signed [15:0] input1,
	input signed [15:0] input2,
	input [3:0] opcode,
	input [15:0] dipswitch,
	output signed [15:0] result, 
	output v, z, c, s );
	
wire [16:0] calcAns;
wire shiftc;

//main function
function [16:0] calculate; 
input [3:0] opcode;
input [15:0] inputvalue1;
input [15:0] inputvalue2; 

begin 
	case (opcode)
	 0:  calculate = inputvalue1 + inputvalue2;
    1:  calculate = inputvalue1 - inputvalue2;
    2:  calculate = inputvalue1 & inputvalue2;
    3:  calculate = inputvalue1 | inputvalue2;
	 4:  calculate = inputvalue1 ^ inputvalue2;
	 5:  calculate = inputvalue2 - inputvalue1; // not write to register
	 6:  calculate = inputvalue1; // mov
	 8:  calculate = inputvalue1 << inputvalue2; // shift left logical
	 9:  calculate = slr(inputvalue1, inputvalue2); // shift left rotate
	 10: calculate = inputvalue1 >> inputvalue2; // shift right logical 
	 11: calculate = sra(inputvalue1, inputvalue2); // shift right arithmetic
	 12: calculate = dipswitch; // in
	 default: calculate = 17'b0;
	 endcase
end 
endfunction

function [16:0] slr;
input [0:15] input1;
input [15:0] input2;
	slr = {input1, input1} >> (16 - input2);
endfunction

function [16:0] sra;
input [15:0] input1, input2;
case (input2)
	1: sra = {input1[15], input1[15:1]};
	2: sra = {{2{input1[15]}}, input1[15:2]};
	3: sra = {{3{input1[15]}}, input1[15:3]};
	4: sra = {{4{input1[15]}}, input1[15:4]};
	5: sra = {{5{input1[15]}}, input1[15:5]};
	6: sra = {{6{input1[15]}}, input1[15:6]};
	7: sra = {{7{input1[15]}}, input1[15:7]};
	default: sra = input1;
endcase
endfunction

function shiftout;
input [3:0] opcode;
input [15:0] input1;
input [15:0] input2;
case(opcode)
	8:case (input2)
		1: shiftout = input1[15];
		2: shiftout = input1[14];
		3: shiftout = input1[13];
		4: shiftout = input1[12];
		5: shiftout = input1[11];
		6: shiftout = input1[10];
		7: shiftout = input1[9];
		default: shiftout = 0;
	  endcase
	10:case (input2)
		1: shiftout = input1[0];
		2: shiftout = input1[1];
		3: shiftout = input1[2];
		4: shiftout = input1[3];
		5: shiftout = input1[4];
		6: shiftout = input1[5];
		7: shiftout = input1[6];
		default: shiftout = 0;
	endcase
	11:case (input2)
		1: shiftout = input1[0];
		2: shiftout = input1[1];
		3: shiftout = input1[2];
		4: shiftout = input1[3];
		5: shiftout = input1[4];
		6: shiftout = input1[5];
		7: shiftout = input1[6];
		default: shiftout = 0;
	endcase
	default shiftout = 0;
endcase 
endfunction

assign calcAns = calculate(opcode, input1, input2);

assign result = calcAns[15:0];

assign shiftc = shiftout(opcode , input1 , input2);

assign z = (result == 16'b0)? 1:0;

// overflow
assign v = (((opcode == 4'b0000) && ((~input1[15] & ~input2[15] & result[15]) || (input1[15] & input2[15] & ~result[15]))) 
					  || (((opcode == 4'b0001)||(opcode == 4'b0101)) && ((input1[15] & ~input2[15] & result[15]) || (~input1[15] & input2[15] & ~result[15]))));

assign c = (calcAns[16] && (opcode == 0 || opcode == 1 || opcode == 5))
						|| ((opcode == 8 || opcode == 10 || opcode == 11) && shiftc);
						
assign s = result[15]? 1:0;

endmodule


